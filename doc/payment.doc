getPayment(time?: ISchedule)

getAccount() 
	/account
		/payment[]
		/attend[]
		/summary

const activePay = account.payment[0]
	&& account.payment[0][FIELD.effect]			// payment is effective
	&& !account.payment[0][FIELD.expire];		// but not yet expired

if (!time)										// simple test to see if an Active row is set
	return activePay						// which might be 'undefined' (never attended, or all payments used-up)

*~~
const credit = account.summary.bank + .pend + .pay - .cost
if (time.price > credit) {
	set <_expire>, unset <active> on /member/payment/{activeId}
	activeId = await create new Payment, set <active>, <_effect>
}

