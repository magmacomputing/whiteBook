// Setup
Load Tables to memory from IDB
	.sort(_expire)

*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// the price to apply to a Class

if (admin) {
	show calendar object
	prompt for Date
}
else Date.now

classes = await lkp (EVENT(Date) || SCHEDULE(Date.dow))
prices = await priceClass(classes, Date)
classes
	.forEach((class, idx) => {
		add <button> class, prices[idx]
	})

onClick
	bookClass(button.text(), Date)
	grey-out <button>	(but allow for re-enable to allow for multiple attends of this class/date)

/**
priceClass(memberId, classes, date=today) {
	plan = asAt(PROFILE[memberId].plan, date)	// the plan they had in effect on that Date
	price = asAt(PLAN, date)									// the prices that were in effect for that Plan on that Date

	return classes
		.map(class => CLASS[class].type || 'Full')
		.map(type => price[type])
}

bookClass(MemberId, Class, Price, Date=today) {
	attend = {memberId, class, price, date}
	db.write(attend)
}

// to calculate As-at
asAt(Table, Date=today) {
	if (Date === today)
		return Table[0]
	prev = Table
		.splice(1)
		.filter(Date >= _expire)
	return prev[0] || Table[0]
}
